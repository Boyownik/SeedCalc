# Python 3.8.2
import json
import math
import os
import webbrowser

import PySimpleGUI as sg
import win32clipboard
from json.decoder import JSONDecodeError


class Seed:  # Defining class for seeds
    amount = 0

    def __init__(self, name, ilv, tr, price):
        self.n = name  # Name of seed
        self.ilvl = ilv  # iLvl of seed
        self.tier = tr  # Tier of seed
        self.pc = price  # Price for each in chaos of seed


def check_seed(name, ilv, ls):  # Check if seed obj already is on the list
    if len(ls) == 0:
        return None
    for obj in ls:
        if obj.n == name and obj.ilvl == ilv:
            return ls.index(obj)


def list_seeds(tier, seeds, ign):  # List seeds
    wild_total = 0
    vivid_total = 0
    primal_total = 0
    wildp_total = 0.0
    vividp_total = 0.0
    primalp_total = 0.0
    wild = []
    vivid = []
    primal = []
    discount = 0.9  # Discount on buying all seeds

    for s in seeds:  # Loop through given list of seeds and count them
        if s.n.startswith("Wild"):  # Wild seeds
            wild_total += s.amount
            wildp_total += s.pc * s.amount
            wild.append(s)
        if s.n.startswith("Vivid"):  # Vivid seeds
            vivid_total += s.amount
            vividp_total += s.pc * s.amount
            vivid.append(s)
        if s.n.startswith("Primal"):  # Primal seeds
            primal_total += s.amount
            primalp_total += s.pc * s.amount
            primal.append(s)

    seeds = wild + vivid + primal  # Replace given list by sorted list with order Wild -> Vivid -> Primal

    file = open("output.txt", "w", encoding="utf-8")  # Open txt file with output
    # TODO: Make script ask for tiers of seed to count and count them
    # if tier == 0:  # List all tiers
    #     file.write("WTS Seeds! iLvl78+!\n")
    #     file.write("\n")
    #     for i in seeds:
    #         file.write(f"{i.n} Tier: {i.tier} iLvl: {i.ilvl} Amount: {i.amount}\n")
    # TODO: Make script to find lowest iLvl of seed and mention it in message
    if tier == 1:  # List only T1 seeds
        file.write(f"```WTS Seeds! All T{tier}! & iLvl76+!\n")
        file.write("All prices are in Chaos! You can pay by Exalts or Chaos!\n")
        file.write("\n")
        for s in seeds:
            if s.tier == tier:
                file.write(f">{s.n} Amount: {s.amount} pc/e: {s.pc} pc/all: {math.ceil(s.pc * s.amount)}\n")

        file.write(f"\nWild total amount: {wild_total} pc/all: {math.ceil(wildp_total)}\n")
        file.write(f"Vivid total amount: {vivid_total} pc/all: {math.ceil(vividp_total)}\n")
        file.write(f"Primal total amount: {primal_total} pc/all: {math.ceil(primalp_total)}\n")
        file.write(f"\n**Take all for: {math.ceil((wildp_total + vividp_total + primalp_total) * discount)}"
                   f"with 10% discount!**\n")
        file.write(f"\nPM me on Discord or IG @{ign}\n")
        file.write("---Generated by SeedCalc---```")
        file.close()

    #  Read output file and pop message with output
    file = open("output.txt", "r")
    sg.PopupScrolled(file.read(), title="Output", no_titlebar=True)


def get_data(data_input, ign):  # Get the data of stash
    with open('prices.json') as p:
        try:
            stash_data = json.loads(data_input)
            prices = json.load(p)
        except JSONDecodeError as e:
            sg.PopupScrolled(f"Invalid json data! Error: {e}", title="Warning")
            return

    # Iterating through items, looking for seeds
    names = ["Wild", "Vivid", "Primal"]
    seeds = []

    for item in stash_data["items"]:
        curr_name = str(item["typeLine"])

        if curr_name.startswith(tuple(names)):
            # Will use this when implement listing seeds by ilvl/Tier
            # curr_ilvl = int(item["properties"][2]["values"][0][0])
            curr_ilvl = 0
            curr_tier = int(item["properties"][1]["values"][0][0])

            ix = check_seed(curr_name, curr_ilvl, seeds)
            if ix is None:
                price = float(prices["T1"].get(curr_name))
                s = Seed(curr_name, curr_ilvl, curr_tier, price)
                s.amount += item["stackSize"]
                seeds.append(s)
            else:
                seeds[ix].amount += item["stackSize"]

    if len(seeds) == 0:
        sg.PopupScrolled("There are no seeds in this stash!", title="Warning")
        return

    list_seeds(1, seeds, ign)


# -------------------------------------------- PREPARATIONS --------------------------------------------
# Check update - someday lul

# Load settings
nickname = ""
ign = ""
tab_index = 0
PRICES_TEMPLATE = {
	"T1": {
		"Wild Hatchling Seed": 0.5,
		"Wild Ursaling Seed": 0.5,
		"Wild Hellion Seed": 0.5,
		"Wild Ape Seed": 0.5,
		"Wild Thornwolf Seed": 0.5,
		"Vivid Arachnid Seed": 0.5,
		"Vivid Thornweaver Seed": 14,
		"Vivid Leech Seed": 0.5,
		"Vivid Scorpion Seed": 0.5,
		"Vivid Weta Seed": 0.5,
		"Primal Maw Seed": 0.8,
		"Primal Rhoa Seed": 0.5,
		"Primal Feasting Horror Seed": 0.5,
		"Primal Cleaveling Seed": 0.5,
		"Primal Dustspitter Seed": 0.5
	}
}

# Check if file with seed prices exists
if not os.path.exists("prices.json"):
    sg.PopupScrolled("Could not find json file with prices, generating default one.", title="Warning")

    with open("prices.json", "w") as wrf:
        json.dump(PRICES_TEMPLATE, wrf, indent=4)


if os.path.exists("settings"):  # Load settings if settings file exists
    f = open("settings", "r")
    lines = f.readlines()
    for line in lines:
        line.strip()

        if line.startswith("IGN"):  # Load IGN
            ign = line.split("=")[1]
            ign.strip()

        if line.startswith("NICKNAME"):  # Load Nickname
            nickname = line.split("=")[1]
            nickname.strip()

        if line.startswith("STASH_INDEX"):  # Load index of stash tab
            tab_index = int(line.split("=")[1])

# -------------------------------------------- GUI --------------------------------------------
sg.theme('DarkAmber')  # Set theme

# Layout of window
layout = [
            [sg.Text("Simple Seed Calc/Sorter by Boyownik")],
            [sg.Text("Type in your account nickname (from PoE site, not char's)"), sg.InputText(k="NICKNAME",
                                                                                                default_text=nickname,
                                                                                                size=(20, 1))],
            [sg.Text("Type in your IGN (current char's name)"), sg.InputText(k="IGN", default_text=ign,
                                                                             size=(20, 1))],
            [sg.Text("Type in index of your stash to get data of (1,2,3...)"),
             sg.InputText(k="INDEX", default_text=tab_index, size=(5, 1))],
            [sg.Button("Save")],
            [sg.Text("Click the button and copy ALL data from there"), sg.Button("Get link with data")],
            [sg.Button("Click me after you copied data")]
        ]

window = sg.Window("Simple Seed Calc", layout, icon="icon.ico")  # Create Window

while True:  # Event Loop to process "events" and get the "values" of the inputs
    event, values = window.read()
    if event == sg.WIN_CLOSED:
        break

    if event == "Save":  # Save button
        f = open("settings", "w")
        f.writelines([f"NICKNAME={str(values['NICKNAME'])}\n", f"STASH_INDEX={int(values['INDEX'])}\n",
                      f"IGN={str(values['IGN'])}\n"])
        f.close()
        sg.Popup("Saved!", text_color="green")

    if event == "Get link with data":  # Link button
        nickname = str(values["NICKNAME"])
        tab_index = int(values["INDEX"])

        url = "https://www.pathofexile.com/character-window/get-stash-items?league=Harvest&tabs=&tabIndex=" + str(
            tab_index) + "&accountName=" + nickname
        webbrowser.open(url, new=2)  # Opens browser with data

    if event == "Click me after you copied data":  # List seeds button
        # Get data from clipboard
        win32clipboard.OpenClipboard()
        data = win32clipboard.GetClipboardData()
        win32clipboard.CloseClipboard()

        get_data(data, ign)




